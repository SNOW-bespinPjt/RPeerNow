<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--&lt;!&ndash;-->
















<!--&ndash;&gt;-->
<!--&lt;!&ndash; 10초마다 파일 변화를 체크하여 갱신시킨다. &ndash;&gt;-->
<!--<configuration scan="true" scanPeriod="10 seconds">-->

<!--    &lt;!&ndash; spring.profile에 따른 설정파일 분기 &ndash;&gt;-->
<!--    <springProfile name = "prod">-->
<!--        <property resource = "logback-prod.properties"/>-->
<!--    </springProfile>-->

<!--    <springProfile name = "dev">-->
<!--        <property resource = "logback-dev.properties"/>-->
<!--    </springProfile>-->

<!--    &lt;!&ndash; 루트 로그 레벨 &ndash;&gt;-->
<!--    &lt;!&ndash; property: 설정파일에서 사용될 변수값 선언 &ndash;&gt;-->
<!--    <property name ="LOG_LEVEL" value = "${log.config.level}"/>-->

<!--    &lt;!&ndash; 로그 파일 경로 &ndash;&gt;-->
<!--    <property name ="LOG_PATH" value = "${log.config.path}"/>-->

<!--    &lt;!&ndash; 로그 파일 명 &ndash;&gt;-->
<!--    <property name ="LOG_FILE_NAME" value = "${log.config.filename}"/>-->
<!--    <property name ="ERR_LOG_FILE_NAME" value = "${log.config.filename}_error"/>-->

<!--    &lt;!&ndash; 로그 파일 패턴 &ndash;&gt;-->
<!--    <property name ="LOG_PATTERN" value = "%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>-->

<!--    &lt;!&ndash; appender : log의 형태를 설정, 로그 메시지가 출력될 대상을 결정하는 요소(콘솔, 파일로 출력할지 등의 설정)&ndash;&gt;-->

<!--    &lt;!&ndash; 콘솔 Appender 설정  /로그를 OutputStream에 작성하여 콘솔에 출력되도록 함&ndash;&gt;-->
<!--    <appender name ="CONSOLE" class ="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash; encoder: Appender에 포함되어 사용자가 지정한 형식으로 표현 될 로그메시지를 변환하는 역할을 담당하는 요소 / layout보다는 encoder를 사용하면 된다&ndash;&gt;-->
<!--        <encoder class ="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>${LOG_PATTERN}</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 파일 Appender 설정 / 최대 보관 일 수 등을 지정할 수 있다.&ndash;&gt;-->
<!--    <appender name="FILE" class ="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 파일 경로 설정 &ndash;&gt;-->
<!--        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>-->

<!--        &lt;!&ndash; 로그 패턴 설정 &ndash;&gt;-->
<!--        <encoder class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>${LOG_PATTERN}</pattern>-->
<!--        </encoder>-->

<!--        &lt;!&ndash; 롤링 정책 &ndash;&gt;-->
<!--        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; gz, zip 등을 넣을 경우 자동 로그파일 압축 &ndash;&gt;-->
<!--            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/${LOG_FILE_NAME}_%i.log</fileNamePattern>-->
<!--            &lt;!&ndash; 3일까지 보관 &ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                &lt;!&ndash; 파일당 최고 용량 &ndash;&gt;-->
<!--                <maxFileSize>10MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->

<!--            &lt;!&ndash; 로그파일 최대 보관주기 &ndash;&gt;-->
<!--            <maxHistory>3</maxHistory>-->
<!--        </rollingPolicy>-->
<!--    </appender>-->


<!--    &lt;!&ndash; RollingFileAppender: 여러개의 파일을 롤링, 순회하면서 로그를 찍는다. &ndash;&gt;-->
<!--    &lt;!&ndash; FileAppender를 상속 받는다. 지정 용량이 넘어간 Log File을 넘버링 하여 나누어 저장할 수 있다.&ndash;&gt;-->
<!--    <appender name = "ERROR" class ="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <filter class ="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>error</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>-->

<!--        &lt;!&ndash; 로그 패턴 설정 &ndash;&gt;-->
<!--        <encoder class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>${LOG_PATTERN}</pattern>-->
<!--        </encoder>-->

<!--        &lt;!&ndash; 롤링 정책 &ndash;&gt;-->
<!--        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; gz, zip 등을 넣을 경우 자동 로그파일 압축 &ndash;&gt;-->
<!--            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/${ERR_LOG_FILE_NAME}_%i.log</fileNamePattern>-->

<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                &lt;!&ndash; 파일당 최고 용량 &ndash;&gt;-->
<!--                <maxFileSize>10MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->

<!--            &lt;!&ndash; 로그파일 최대 보관주기 &ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--    </appender>-->

<!--    &lt;!&ndash; root는 전역 설정, 지역적으로 선언된 logger 설정이 있다면 해당 logger 설정이 default로 적용    &ndash;&gt;-->
<!--    <root level = "${LOG_LEVEL}">-->
<!--        <appender-ref ref="CONSOLE"/>-->
<!--        <appender-ref ref="FILE"/>-->
<!--        <appender-ref ref="ERROR"/>-->
<!--    </root>-->

<!--    &lt;!&ndash; logger는 지역 설정, additivity = false는 root 설정 상속 유무를 설정하는 옵션.    &ndash;&gt;-->
<!--    <logger name="org.apache.ibatis" level = "DEBUG" additivity = "false">-->
<!--        <appender-ref ref="CONSOLE"/>-->
<!--        <appender-ref ref="FILE"/>-->
<!--        <appender-ref ref="ERROR"/>-->
<!--    </logger>-->
<!--</configuration>-->